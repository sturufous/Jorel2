package ca.bc.gov.tno.jorel2.model;
// Generated Dec 24, 2019, 8:06:31 AM by Hibernate Tools 5.0.6.Final

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.Session;
import org.hibernate.query.Query;

/**
 * Channels generated by hbm2java
 */
@Entity
@Table(name = "CHANNELS", schema = "TNO")
public class ChannelsDao implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private BigDecimal rsn;
	private String channelName;
	private String url;
	private String source;
	private String series;
	private Boolean active;
	private Boolean autoAlert;
	private Boolean autoPublish;
	private String autoTags;
	private String lastRun;
	private Date lastRunDate;
	private String emailRecipients;
	private BigDecimal delay;
	private Boolean makeEmailButton;

	public ChannelsDao() {
	}

	public ChannelsDao(BigDecimal rsn) {
		this.rsn = rsn;
	}

	public ChannelsDao(BigDecimal rsn, String channelName, String url, String source, String series, Boolean active,
			Boolean autoAlert, Boolean autoPublish, String autoTags, String lastRun, Date lastRunDate,
			String emailRecipients, BigDecimal delay, Boolean makeEmailButton) {
		this.rsn = rsn;
		this.channelName = channelName;
		this.url = url;
		this.source = source;
		this.series = series;
		this.active = active;
		this.autoAlert = autoAlert;
		this.autoPublish = autoPublish;
		this.autoTags = autoTags;
		this.lastRun = lastRun;
		this.lastRunDate = lastRunDate;
		this.emailRecipients = emailRecipients;
		this.delay = delay;
		this.makeEmailButton = makeEmailButton;
	}

	@Id

	@Column(name = "RSN", unique = true, nullable = false, precision = 38, scale = 0)
	public BigDecimal getRsn() {
		return this.rsn;
	}

	public void setRsn(BigDecimal rsn) {
		this.rsn = rsn;
	}

	@Column(name = "CHANNEL_NAME", length = 100)
	public String getChannelName() {
		return this.channelName;
	}

	public void setChannelName(String channelName) {
		this.channelName = channelName;
	}

	@Column(name = "URL", length = 2000)
	public String getUrl() {
		return this.url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	@Column(name = "SOURCE", length = 100)
	public String getSource() {
		return this.source;
	}

	public void setSource(String source) {
		this.source = source;
	}

	@Column(name = "SERIES", length = 100)
	public String getSeries() {
		return this.series;
	}

	public void setSeries(String series) {
		this.series = series;
	}

	@Column(name = "ACTIVE", precision = 1, scale = 0)
	public Boolean getActive() {
		return this.active;
	}

	public void setActive(Boolean active) {
		this.active = active;
	}

	@Column(name = "AUTO_ALERT", precision = 1, scale = 0)
	public Boolean getAutoAlert() {
		return this.autoAlert;
	}

	public void setAutoAlert(Boolean autoAlert) {
		this.autoAlert = autoAlert;
	}

	@Column(name = "AUTO_PUBLISH", precision = 1, scale = 0)
	public Boolean getAutoPublish() {
		return this.autoPublish;
	}

	public void setAutoPublish(Boolean autoPublish) {
		this.autoPublish = autoPublish;
	}

	@Column(name = "AUTO_TAGS", length = 200)
	public String getAutoTags() {
		return this.autoTags;
	}

	public void setAutoTags(String autoTags) {
		this.autoTags = autoTags;
	}

	@Column(name = "LAST_RUN", length = 20)
	public String getLastRun() {
		return this.lastRun;
	}

	public void setLastRun(String lastRun) {
		this.lastRun = lastRun;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "LAST_RUN_DATE", length = 7)
	public Date getLastRunDate() {
		return this.lastRunDate;
	}

	public void setLastRunDate(Date lastRunDate) {
		this.lastRunDate = lastRunDate;
	}

	@Column(name = "EMAIL_RECIPIENTS", length = 2000)
	public String getEmailRecipients() {
		return this.emailRecipients;
	}

	public void setEmailRecipients(String emailRecipients) {
		this.emailRecipients = emailRecipients;
	}

	@Column(name = "DELAY", precision = 38, scale = 0)
	public BigDecimal getDelay() {
		return this.delay;
	}

	public void setDelay(BigDecimal delay) {
		this.delay = delay;
	}

	@Column(name = "MAKE_EMAIL_BUTTON", precision = 1, scale = 0)
	public Boolean getMakeEmailButton() {
		return this.makeEmailButton;
	}

	public void setMakeEmailButton(Boolean makeEmailButton) {
		this.makeEmailButton = makeEmailButton;
	}
	
	/**
	 * Get expired items for ExpireEventProcessor.clearExpiringSources(). 
	 * 
	 * @param source Restrict the results to news_items that match this source.
	 * @param days Look for items that are more than "days" old.
	 * @param session The current Hibernate persistence context.
	 * @return A list containing all the records that meet the expiry criteria.
	 */
	public static List<ChannelsDao> getActiveUnlockedChannels(String process, Session session) {
		
		String sqlStmt = "from ChannelsDao where active = 1 AND (lastRun = 'idle' OR lastRun = :lastRun) AND ((SYSDATE-lastRunDate)*24*60*60 > delay) order by lastRunDate";

		Query<ChannelsDao> query = session.createQuery(sqlStmt, ChannelsDao.class);
		query.setParameter("lastRun", process);
        List<ChannelsDao> results = query.getResultList();
        
		return results;
	}
	
	/**
	 * Locks the channel so that no other Jorel2 instances attempts to process it.
	 * 
	 * @param name The name of the current Jorel2 instance.
	 * @param channel The channel record to update.
	 * @param session The current Hibernate persistence context.
	 * @throws Exception Passes any exceptions up to the ChannelwatcherEvent processor for handling.
	 */
	public static void lockChannel(String name, ChannelsDao channel, Session session) throws Exception {
		
		channel.setLastRun(name);
		session.beginTransaction();
		session.persist(channel);
		session.getTransaction().commit();
	}
	
	/**
	 * Unlocks the channel so that this, or other Jorel2 instances, can process it later.
	 * 
	 * @param name The name of the current Jorel2 instance.
	 * @param channel The channel record to update.
	 * @param session The current Hibernate persistence context.
	 * @throws Exception Passes any exceptions up to the ChannelwatcherEvent processor for handling.
	 */
	public static void unlockChannel(ChannelsDao channel, Session session) throws Exception {
		
		channel.setLastRun("idle");
		session.beginTransaction();
		session.save(channel);
		session.getTransaction().commit();
	}
}
