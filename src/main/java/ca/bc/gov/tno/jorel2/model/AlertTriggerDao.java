package ca.bc.gov.tno.jorel2.model;
// Generated Dec 24, 2019, 8:06:31 AM by Hibernate Tools 5.0.6.Final

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.Session;
import org.hibernate.query.Query;

/**
 * AlertTrigger generated by hbm2java
 */
@Entity
@Table(name = "ALERT_TRIGGER", schema = "TNO")
public class AlertTriggerDao implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private Date dateCreated;

	public AlertTriggerDao() {
	}

	public AlertTriggerDao(Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	@Id

	@Temporal(TemporalType.DATE)
	@Column(name = "DATE_CREATED", length = 7)
	public Date getDateCreated() {
		return this.dateCreated;
	}

	public void setDateCreated(Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	/**
	 * Check to see if alerts should be triggered by assessing the number of records in the ALERT_TRIGGER table. If there are alerts, but the
	 * SYNC_INDEX table also contains records then return -1. This condition indicates that alerts should not be triggered because the indexing
	 * of news items has been requested or is in progress.
	 * 
	 * @param session The current Hibernate persistence context.
	 * @return The number of ALERT_TRIGGER records or -1
	 */
	public static int getTriggerCount(Session session) {
		
		String alertSqlStmt = "from AlertTriggerDao";
		String syncSqlStmt = "from SyncIndexDao";
		int count = 0;

		Query<AlertTriggerDao> alertQuery = session.createQuery(alertSqlStmt, AlertTriggerDao.class);
        List<AlertTriggerDao> alertResults = alertQuery.getResultList();
        
        if(alertResults.size() > 0) {
    		Query<SyncIndexDao> syncQuery = session.createQuery(syncSqlStmt, SyncIndexDao.class);
            List<SyncIndexDao> syncResults = syncQuery.getResultList();
        	
            if(syncResults.size() > 0) {
            	count = -1;
            } else {
            	count = alertResults.size();
            }
        }
		
        return count;
	}
	
	/**
	 * Delete all records in the ALERT_TRIGGER table.
	 * 
	 * @param session The current Hibernate persistence context.
	 */
	public static void deleteAllRecords(Session session) {
		
		String sqlStmt = "delete from AlertTriggerDao";
		
		session.beginTransaction();
		Query<?> syncQuery = session.createQuery(sqlStmt);
		syncQuery.executeUpdate();
		session.getTransaction().commit();
	}

}
